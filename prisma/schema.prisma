generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String         @id @default(uuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  registrationDate DateTime       @default(now())
  progress         UserProgress[]
}

model Position {
  id        String     @id @default(uuid())
  name      String
  questions Question[]
}

model Question {
  id                String              @id @default(uuid())
  content           String
  answer            String
  difficulty        DifficultyLevelEnum
  positionId        String
  position          Position            @relation(fields: [positionId], references: [id])
  translatedAnswers TranslatedAnswer[]
  UserProgress      UserProgress[]
}

model UserProgress {
  id           String             @id @default(uuid())
  userId       String
  questionId   String
  status       ProgressStatusEnum
  lastActivity DateTime           @default(now())
  question     Question           @relation(fields: [questionId], references: [id])
  user         User               @relation(fields: [userId], references: [id])
}

model TranslatedAnswer {
  id             String   @id @default(uuid())
  questionId     String
  language       String
  translatedText String
  question       Question @relation(fields: [questionId], references: [id])
}

enum DifficultyLevelEnum {
  JUNIOR
  REGULAR
  SENIOR
}

enum ProgressStatusEnum {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}
